import 'dotenv/config';
import express from 'express';
import { middleware, Client } from '@line/bot-sdk';
import { predictVeggie } from './teachable.js';
import { getMessageBuffer } from './utils.js';
import { veggiesInfo, resolveVeggie } from './veggies.js';

const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};

if (!config.channelAccessToken || !config.channelSecret) {
  console.error('‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE_CHANNEL_ACCESS_TOKEN ‡πÅ‡∏•‡∏∞ LINE_CHANNEL_SECRET ‡πÉ‡∏ô ENV');
  process.exit(1);
}

const MIN_CONF = 0.65; // ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (0..1) ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ

const app = express();
const client = new Client(config);

// Health check
app.get('/', (_req, res) => res.send('Veggie Bot on Render ‚úÖ'));

// Webhook endpoint
app.post('/webhook', middleware(config), async (req, res) => {
  try {
    await Promise.all((req.body.events || []).map(handleEvent));
    res.status(200).end();
  } catch (err) {
    console.error('Webhook error:', err);
    res.status(500).end();
  }
});

async function handleEvent(event) {
  if (event.type !== 'message') return;

  // ---------- ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ----------
  if (event.message.type === 'image') {
    try {
      const buf = await getMessageBuffer(client, event.message.id);
      const { label, confidences } = await predictVeggie(buf);

      const top = confidences[0];
      const confStr = confidences
        .slice(0, 3)
        .map(c => `${c.label}: ${(c.prob * 100).toFixed(1)}%`)
        .join('\n');

      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥
      if (top.prob < MIN_CONF) {
        const unsureText =
          `ü§î ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (${(top.prob * 100).toFixed(1)}%)\n` +
          `Top 3:\n${confStr}\n\n` +
          `‡∏ä‡πà‡∏ß‡∏¢‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô/‡∏´‡∏•‡∏≤‡∏¢‡∏°‡∏∏‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏±‡∏Å (EN/TH) ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô: Carrot`;
        return client.replyMessage(event.replyToken, { type: 'text', text: unsureText });
      }

      // map ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏¢ ‚Üí ‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const key = resolveVeggie(label);
      const info = veggiesInfo[key];

      const shownName = info?.nameTH ? `${key} (${info.nameTH})` : key;

      let replyText = `ü•¨ ‡∏ú‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô: ${shownName}\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (Top 3)\n${confStr}`;
      if (info) {
        replyText += `\n\n‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå: ${info.benefit}\n‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${info.menu}`;
      } else {
        replyText += `\n\n‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå/‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≠‡∏á "${shownName}"\n` +
          `‡∏û‡∏¥‡∏°‡∏û‡πå: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${key} ‡πÑ‡∏ó‡∏¢=<‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢> ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå=<‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°> ‡πÄ‡∏°‡∏ô‡∏π=<‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°>`;
      }

      return client.replyMessage(event.replyToken, { type: 'text', text: replyText });
    } catch (e) {
      console.error('predict error:', e);
      return client.replyMessage(event.replyToken, { type: 'text', text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üò¢' });
    }
  }

  // ---------- ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ----------
  if (event.message.type === 'text') {
    const text = (event.message.text || '').trim();

    if (/^‡∏ä‡πà‡∏ß‡∏¢|‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ|help$/i.test(text)) {
      const guide =
        `‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏ú‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ó‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏ô‡∏π\n` +
        `- ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà\n` +
        `- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô:\n` +
        `  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Carrot ‡πÑ‡∏ó‡∏¢=‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå=‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏™‡∏≤‡∏¢‡∏ï‡∏≤ ‡πÄ‡∏°‡∏ô‡∏π=‡πÅ‡∏Å‡∏á‡∏™‡πâ‡∏°‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó`;
      return client.replyMessage(event.replyToken, { type: 'text', text: guide });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ä‡∏ó (‡πÑ‡∏ó‡∏¢= ‡πÄ‡∏õ‡πá‡∏ô option)
    if (text.startsWith('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ')) {
      const m = text.match(/^‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\s+(\S+)\s+(?:‡πÑ‡∏ó‡∏¢=(.+?)\s+)?‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå=(.+?)\s+‡πÄ‡∏°‡∏ô‡∏π=(.+)$/);
      if (m) {
        const nameEN = resolveVeggie(m[1]);
        const nameTH = (m[2] || veggiesInfo[nameEN]?.nameTH || '').trim();
        const benefit = m[3].trim();
        const menu = m[4].trim();
        const current = veggiesInfo[nameEN] || { nameTH: '', benefit: '', menu: '' };
        veggiesInfo[nameEN] = { ...current, nameTH, benefit, menu };
        return client.replyMessage(
          event.replyToken,
          { type: 'text', text: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏±‡∏Å "${nameEN}${nameTH ? ` (${nameTH})` : ''}" ‡πÅ‡∏•‡πâ‡∏ß ‚úÖ` }
        );
      }
      return client.replyMessage(
        event.replyToken,
        { type: 'text', text: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Carrot ‡πÑ‡∏ó‡∏¢=‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå=... ‡πÄ‡∏°‡∏ô‡∏π=...' }
      );
    }

    // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏±‡∏Å‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const key = resolveVeggie(text);
    if (veggiesInfo[key]) {
      const v = veggiesInfo[key];
      const shownName = v.nameTH ? `${key} (${v.nameTH})` : key;
      const msg = `ü•¨ ${shownName}\n‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå: ${v.benefit}\n‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${v.menu}`;
      return client.replyMessage(event.replyToken, { type: 'text', text: msg });
    }

    return client.replyMessage(event.replyToken, { type: 'text', text: '‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏ú‡∏±‡∏Å‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ' });
  }
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => console.log(`üöÄ Server listening on :${PORT}`));
